======================================================================
MODEL SANITY CHECK
======================================================================

[1/4] Testing imports...
2025-10-07 22:09:21.721261: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-10-07 22:09:23.026808: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
✓ TensorFlow: 2.17.0
✓ OpenCV: 4.9.0

[2/4] Loading model...
2025-10-07 22:09:27.180562: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
✓ Model loaded from: models\final\asl_baseline_cnn_128_final.h5
  Input shape: (None, 128, 128, 3)
  Output shape: (None, 29)
✓ Output classes: 29 (correct!)

[3/4] Testing prediction with random image...
  Input shape: (1, 128, 128, 3)
  Input range: [0.000, 0.996]
C:\Users\ameli\speakez\venv\Lib\site-packages\keras\src\models\functional.py:241: UserWarning: The structure of `inputs` doesn't match the expected structure.
Expected: ['input_layer_4']
Received: inputs=Tensor(shape=(1, 128, 128, 3))
  warnings.warn(msg)
2025-10-07 22:09:27.436837: E tensorflow/core/util/util.cc:131] oneDNN supports DT_HALF only on platforms with AVX-512. Falling back to the default Eigen-based implementation if present.
  Output shape: (29,)
  Output range: [0.000000, 1.000000]
  Output sum: 1.000000 (should be ~1.0 for softmax)

  Top 5 predictions (random image):
    1. L          = 1.0000 (100.0%)
    2. M          = 0.0000 (0.0%)
    3. K          = 0.0000 (0.0%)
    4. B          = 0.0000 (0.0%)
    5. NOTHING    = 0.0000 (0.0%)

  ⚠️  Confidence 1.000 is HIGH for random image!
  This might indicate overfitting.

[4/4] Testing with multiple inputs...

  Test results:
    all zeros       → S          (conf=0.521)
    all ones        → L          (conf=0.906)
    random 1        → L          (conf=1.000)
    random 2        → L          (conf=1.000)

  ✓ Got 2 different predictions (diversity is good)

======================================================================
SUMMARY
======================================================================

Model appears to be:
  ✓ Loadable
  ✓ Executable
  ✓ Producing outputs

Next steps:
  1. Run: python debug_detection.py
     This will test with actual camera input

  2. If debug_detection shows low confidences (<0.20):
     - Lower threshold in inference_.py
     - Improve lighting/background
     - Check if model needs retraining

  3. Try simple camera test:
     python test_camera.py  (or app_simple.py)

======================================================================
✓ SANITY CHECK PASSED
======================================================================